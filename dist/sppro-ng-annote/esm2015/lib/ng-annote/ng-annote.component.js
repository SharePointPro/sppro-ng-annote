import { Component, EventEmitter, Output } from '@angular/core';
import Konva from 'konva';
import { DrawableEnum } from '../enums/drawableEnum';
import shapeFactory from '../factories/shapeFactory';
import textareaFactory from '../factories/textareaFactory';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../toolbar/toolbar.component';
const DEFAULT_DRAWABLE_TYPE = DrawableEnum.FreePathDrawable;
const DEFAULT_FONT_FAMILY = 'Arial';
export class NgAnnoteComponent {
    constructor() {
        this.onSave = new EventEmitter();
        this._drawableType = DEFAULT_DRAWABLE_TYPE;
        this.isPaint = false;
        this.mode = 'brush';
        this.color = '#000000';
        this.textAreaVisible = false;
    }
    get drawableType() {
        return this._drawableType;
    }
    set drawableType(value) {
        this._drawableType = value;
    }
    ngOnInit() {
        this.img = new Image();
        this.img.onload = () => {
            this.image = new Konva.Image({
                image: this.img,
            });
            this.initalizeStage();
            this.layer = new Konva.Layer({});
            this.layer.add(this.image);
            this.stage.add(this.layer);
        };
        this.img.src = "https://sharepointpro.github.io/sppro-image-annote/static/media/room.fdc5a868.jpg";
    }
    initalizeStage() {
        this.stage = new Konva.Stage({
            container: "stage",
            width: this.img.width,
            height: this.img.height
        });
        this.stage.on('mousedown', (e) => { this.onMouseDown(e); });
        this.stage.on('mouseup', (e) => { this.onMouseUp(e); });
        this.stage.on('mousemove', (e) => { this.onMouseMove(e); });
    }
    onMouseDown(e) {
        this.isPaint = true;
        var pos = this.stage.getPointerPosition();
        if (this.drawableType === DrawableEnum.FreePathDrawable) {
            this.lastShape = shapeFactory.CreateLine(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.SquareDrawable) {
            this.lastShape = shapeFactory.CreateRectange(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.CircleDrawable) {
            this.lastShape = shapeFactory.CreateCircle(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.ArrowDrawable) {
            this.lastShape = shapeFactory.CreateArrow(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.TextDrawable) {
            if (!this.textAreaVisible) {
                this.textAreaVisible = true;
                textareaFactory.createTextArea(pos.x, pos.y, this.color, DEFAULT_FONT_FAMILY, (element) => {
                    if (element.target.value !== "") {
                        this.lastShape = shapeFactory.CreateText(pos.x, pos.y, this.color, DEFAULT_FONT_FAMILY, element.target.value);
                        this.layer.add(this.lastShape);
                        this.layer.batchDraw();
                        this.textAreaVisible = false;
                    }
                });
            }
        }
    }
    onSaveClick() {
        this.onSave.emit(this.stage.toDataURL());
    }
    onClear() {
        while (this.layer.children.length > 1) {
            this.onUndo();
        }
        this.layer.batchDraw();
    }
    onMouseUp(e) {
        this.isPaint = false;
        this.lastShape = null;
    }
    onUndo() {
        if (this.layer.children.length > 1) {
            this.layer.children.splice(-1, 1);
            this.layer.batchDraw();
        }
    }
    onMouseMove(e) {
        if (!this.isPaint || !this.lastShape || this.lastShape === DrawableEnum.TextDrawable) {
            return;
        }
        const pos = this.stage.getPointerPosition();
        if (this.drawableType === DrawableEnum.FreePathDrawable) {
            let newPoints = this.lastShape.points().concat([pos.x, pos.y]);
            this.lastShape.points(newPoints);
        }
        if (this.drawableType === DrawableEnum.SquareDrawable) {
            const dx = -(this.lastShape.attrs.x - pos.x);
            const dy = -(this.lastShape.attrs.y - pos.y);
            this.lastShape.attrs.width = dx;
            this.lastShape.attrs.height = dy;
        }
        if (this.drawableType === DrawableEnum.CircleDrawable) {
            const dx = this.lastShape.attrs.x - pos.x;
            const dy = this.lastShape.attrs.y - pos.y;
            const radius = Math.sqrt(dx * dx + dy * dy);
            this.lastShape.attrs.radius = radius;
        }
        if (this.drawableType === DrawableEnum.ArrowDrawable) {
            let newPoints = [this.lastShape.attrs.points[0], this.lastShape.attrs.points[1]];
            newPoints.push(pos.x);
            newPoints.push(pos.y);
            this.lastShape.points(newPoints);
        }
        this.layer.batchDraw();
    }
}
NgAnnoteComponent.ɵfac = function NgAnnoteComponent_Factory(t) { return new (t || NgAnnoteComponent)(); };
NgAnnoteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgAnnoteComponent, selectors: [["sppro-ng-annote"]], outputs: { onSave: "onSave" }, decls: 4, vars: 2, consts: [[1, "overlay", "sppro-overlay"], [3, "drawableType", "color", "drawableTypeChange", "colorChange", "onUndo", "onClear", "onSave"], [1, "centeredBox"], ["id", "stage"]], template: function NgAnnoteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "sppro-toolbar", 1);
        ɵngcc0.ɵɵlistener("drawableTypeChange", function NgAnnoteComponent_Template_sppro_toolbar_drawableTypeChange_1_listener($event) { return ctx.drawableType = $event; })("colorChange", function NgAnnoteComponent_Template_sppro_toolbar_colorChange_1_listener($event) { return ctx.color = $event; })("onUndo", function NgAnnoteComponent_Template_sppro_toolbar_onUndo_1_listener() { return ctx.onUndo(); })("onClear", function NgAnnoteComponent_Template_sppro_toolbar_onClear_1_listener() { return ctx.onClear(); })("onSave", function NgAnnoteComponent_Template_sppro_toolbar_onSave_1_listener() { return ctx.onSaveClick(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "div", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("drawableType", ctx.drawableType)("color", ctx.color);
    } }, directives: [ɵngcc1.ToolbarComponent], styles: [".centeredBox[_ngcontent-%COMP%]{position:fixed;left:50%;top:50%;transform:translate(-50%,-50%)}.overlay[_ngcontent-%COMP%]{position:fixed;top:0;left:0;right:0;bottom:0;background-color:rgba(0,0,0,.6);z-index:1000}.closeButton[_ngcontent-%COMP%]{position:fixed;right:15px;top:15px;cursor:pointer}.crosshair[_ngcontent-%COMP%]{cursor:crosshair}.text[_ngcontent-%COMP%]{cursor:text}"] });
NgAnnoteComponent.ctorParameters = () => [];
NgAnnoteComponent.propDecorators = {
    onSave: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgAnnoteComponent, [{
        type: Component,
        args: [{
                selector: 'sppro-ng-annote',
                template: "<div class='overlay sppro-overlay'>\r\n    <sppro-toolbar [(drawableType)]=\"drawableType\" [(color)]=\"color\" (onUndo)=\"onUndo()\" (onClear)=\"onClear()\" (onSave)=\"onSaveClick()\"></sppro-toolbar>\r\n    <div class=\"centeredBox\">\r\n        <div id=\"stage\">\r\n            \r\n        </div>\r\n    </div>\r\n\r\n</div>",
                styles: [".centeredBox{position:fixed;left:50%;top:50%;transform:translate(-50%,-50%)}.overlay{position:fixed;top:0;left:0;right:0;bottom:0;background-color:rgba(0,0,0,.6);z-index:1000}.closeButton{position:fixed;right:15px;top:15px;cursor:pointer}.crosshair{cursor:crosshair}.text{cursor:text}"]
            }]
    }], function () { return []; }, { onSave: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYW5ub3RlLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3Bwcm8tbmctYW5ub3RlL3NyYy9saWIvbmctYW5ub3RlL25nLWFubm90ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU8sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxZQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDckQsT0FBTyxlQUFlLE1BQU0sOEJBQThCLENBQUM7OztBQUUzRCxNQUFNLHFCQUFxQixHQUFpQixZQUFZLENBQUMsZ0JBQWdCLENBQUM7QUFDMUUsTUFBTSxtQkFBbUIsR0FBVyxPQUFPLENBQUM7QUFPNUMsTUFBTSxPQUFPLGlCQUFpQjtBQUFJLElBa0JoQztBQUNGLFFBakJZLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0FBQ2hELFFBQ1Usa0JBQWEsR0FBaUIscUJBQXFCLENBQUM7QUFDOUQsUUFJRSxZQUFPLEdBQVksS0FBSyxDQUFDO0FBQzNCLFFBQUUsU0FBSSxHQUFXLE9BQU8sQ0FBQztBQUN6QixRQUNFLFVBQUssR0FBVyxTQUFTLENBQUM7QUFDNUIsUUFBRSxvQkFBZSxHQUFZLEtBQUssQ0FBQztBQUNuQyxJQU1FLENBQUM7QUFDSCxJQUVFLElBQUksWUFBWTtBQUFNLFFBQ3BCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUM5QixJQUFFLENBQUM7QUFDSCxJQUNFLElBQUksWUFBWSxDQUFDLEtBQW1CO0FBQ3RDLFFBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDL0IsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRO0FBQU0sUUFDWixJQUFJLENBQUMsR0FBRyxHQUFH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Q29DLHFCQUFsQyxNQUFNO0FBQUs7Ozs7Ozs7Ozs7O0FBaEJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFrQkEsQUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU9BLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUVBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUE5S0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFHQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlT2ZmbGluZUNvbXBpbGVVcmxSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyJztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBLb252YSBmcm9tICdrb252YSc7XHJcbmltcG9ydCB7IERyYXdhYmxlRW51bSB9IGZyb20gICcuLi9lbnVtcy9kcmF3YWJsZUVudW0nO1xyXG5pbXBvcnQgc2hhcGVGYWN0b3J5IGZyb20gJy4uL2ZhY3Rvcmllcy9zaGFwZUZhY3RvcnknO1xyXG5pbXBvcnQgdGV4dGFyZWFGYWN0b3J5IGZyb20gJy4uL2ZhY3Rvcmllcy90ZXh0YXJlYUZhY3RvcnknO1xyXG5cclxuY29uc3QgREVGQVVMVF9EUkFXQUJMRV9UWVBFOiBEcmF3YWJsZUVudW0gPSBEcmF3YWJsZUVudW0uRnJlZVBhdGhEcmF3YWJsZTtcclxuY29uc3QgREVGQVVMVF9GT05UX0ZBTUlMWTogc3RyaW5nID0gJ0FyaWFsJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnc3Bwcm8tbmctYW5ub3RlJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vbmctYW5ub3RlLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9uZy1hbm5vdGUuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdBbm5vdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBAT3V0cHV0KCkgb25TYXZlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XHJcblxyXG4gIHByaXZhdGUgX2RyYXdhYmxlVHlwZTogRHJhd2FibGVFbnVtID0gREVGQVVMVF9EUkFXQUJMRV9UWVBFO1xyXG5cclxuICBzdGFnZTogS29udmEuU3RhZ2U7XHJcbiAgbGF5ZXI6IEtvbnZhLkxheWVyO1xyXG4gIGltYWdlOiBLb252YS5JbWFnZTtcclxuICBpc1BhaW50OiBib29sZWFuID0gZmFsc2U7XHJcbiAgbW9kZTogc3RyaW5nID0gJ2JydXNoJztcclxuICBsYXN0U2hhcGU6IGFueTtcclxuICBjb2xvcjogc3RyaW5nID0gJyMwMDAwMDAnO1xyXG4gIHRleHRBcmVhVmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHJcbiAgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgZ2V0IGRyYXdhYmxlVHlwZSgpOiBEcmF3YWJsZUVudW0ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RyYXdhYmxlVHlwZTtcclxuICB9XHJcblxyXG4gIHNldCBkcmF3YWJsZVR5cGUodmFsdWU6IERyYXdhYmxlRW51bSkge1xyXG4gICAgdGhpcy5fZHJhd2FibGVUeXBlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcblxyXG4gICAgdGhpcy5pbWcub25sb2FkID0gKCkgPT4ge1xyXG5cclxuICAgICAgdGhpcy5pbWFnZSA9IG5ldyBLb252YS5JbWFnZSh7XHJcbiAgICAgICAgaW1hZ2U6IHRoaXMuaW1nLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuaW5pdGFsaXplU3RhZ2UoKTtcclxuXHJcbiAgICAgIHRoaXMubGF5ZXIgPSBuZXcgS29udmEuTGF5ZXIoe1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5sYXllci5hZGQodGhpcy5pbWFnZSk7XHJcbiAgICAgIHRoaXMuc3RhZ2UuYWRkKHRoaXMubGF5ZXIpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5pbWcuc3JjID0gXCJodHRwczovL3NoYXJlcG9pbnRwcm8uZ2l0aHViLmlvL3NwcHJvLWltYWdlLWFubm90ZS9zdGF0aWMvbWVkaWEvcm9vbS5mZGM1YTg2OC5qcGdcIjtcclxuICB9XHJcblxyXG5cclxuICBpbml0YWxpemVTdGFnZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RhZ2UgPSBuZXcgS29udmEuU3RhZ2Uoe1xyXG4gICAgICBjb250YWluZXI6IFwic3RhZ2VcIixcclxuICAgICAgd2lkdGg6IHRoaXMuaW1nLndpZHRoLFxyXG4gICAgICBoZWlnaHQ6IHRoaXMuaW1nLmhlaWdodFxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5zdGFnZS5vbignbW91c2Vkb3duJywgKGUpID0+IHsgdGhpcy5vbk1vdXNlRG93bihlKSB9KTtcclxuICAgIHRoaXMuc3RhZ2Uub24oJ21vdXNldXAnLCAoZSkgPT4geyB0aGlzLm9uTW91c2VVcChlKSB9KTtcclxuICAgIHRoaXMuc3RhZ2Uub24oJ21vdXNlbW92ZScsIChlKSA9PiB7IHRoaXMub25Nb3VzZU1vdmUoZSkgfSk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlRG93bihlKTogdm9pZCB7XHJcbiAgICB0aGlzLmlzUGFpbnQgPSB0cnVlO1xyXG5cclxuICAgIHZhciBwb3MgPSB0aGlzLnN0YWdlLmdldFBvaW50ZXJQb3NpdGlvbigpO1xyXG5cclxuICAgIGlmICh0aGlzLmRyYXdhYmxlVHlwZSA9PT0gRHJhd2FibGVFbnVtLkZyZWVQYXRoRHJhd2FibGUpIHtcclxuICAgICAgdGhpcy5sYXN0U2hhcGUgPSBzaGFwZUZhY3RvcnkuQ3JlYXRlTGluZShwb3MueCwgcG9zLnksIHRoaXMuY29sb3IpO1xyXG4gICAgICB0aGlzLmxheWVyLmFkZCh0aGlzLmxhc3RTaGFwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZHJhd2FibGVUeXBlID09PSBEcmF3YWJsZUVudW0uU3F1YXJlRHJhd2FibGUpIHtcclxuICAgICAgdGhpcy5sYXN0U2hhcGUgPSBzaGFwZUZhY3RvcnkuQ3JlYXRlUmVjdGFuZ2UocG9zLngsIHBvcy55LCB0aGlzLmNvbG9yKTtcclxuICAgICAgdGhpcy5sYXllci5hZGQodGhpcy5sYXN0U2hhcGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmRyYXdhYmxlVHlwZSA9PT0gRHJhd2FibGVFbnVtLkNpcmNsZURyYXdhYmxlKSB7XHJcbiAgICAgIHRoaXMubGFzdFNoYXBlID0gc2hhcGVGYWN0b3J5LkNyZWF0ZUNpcmNsZShwb3MueCwgcG9zLnksIHRoaXMuY29sb3IpO1xyXG4gICAgICB0aGlzLmxheWVyLmFkZCh0aGlzLmxhc3RTaGFwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZHJhd2FibGVUeXBlID09PSBEcmF3YWJsZUVudW0uQXJyb3dEcmF3YWJsZSkge1xyXG4gICAgICB0aGlzLmxhc3RTaGFwZSA9IHNoYXBlRmFjdG9yeS5DcmVhdGVBcnJvdyhwb3MueCwgcG9zLnksIHRoaXMuY29sb3IpO1xyXG4gICAgICB0aGlzLmxheWVyLmFkZCh0aGlzLmxhc3RTaGFwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZHJhd2FibGVUeXBlID09PSBEcmF3YWJsZUVudW0uVGV4dERyYXdhYmxlKSB7XHJcblxyXG4gICAgICBpZiAoIXRoaXMudGV4dEFyZWFWaXNpYmxlKSB7XHJcbiAgICAgICAgdGhpcy50ZXh0QXJlYVZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICB0ZXh0YXJlYUZhY3RvcnkuY3JlYXRlVGV4dEFyZWEocG9zLngsIHBvcy55LCB0aGlzLmNvbG9yLCBERUZBVUxUX0ZPTlRfRkFNSUxZLCAoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgaWYgKGVsZW1lbnQudGFyZ2V0LnZhbHVlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFNoYXBlID0gc2hhcGVGYWN0b3J5LkNyZWF0ZVRleHQocG9zLngsIHBvcy55LCB0aGlzLmNvbG9yLCBERUZBVUxUX0ZPTlRfRkFNSUxZLCBlbGVtZW50LnRhcmdldC52YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuYWRkKHRoaXMubGFzdFNoYXBlKTtcclxuICAgICAgICAgICAgdGhpcy5sYXllci5iYXRjaERyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0QXJlYVZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBvblNhdmVDbGljaygpOiB2b2lkIHtcclxuICAgIHRoaXMub25TYXZlLmVtaXQodGhpcy5zdGFnZS50b0RhdGFVUkwoKSk7XHJcbiAgfVxyXG5cclxuICBvbkNsZWFyKCk6IHZvaWQge1xyXG4gICAgd2hpbGUgKHRoaXMubGF5ZXIuY2hpbGRyZW4ubGVuZ3RoID4gMSl7XHJcbiAgICAgIHRoaXMub25VbmRvKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmxheWVyLmJhdGNoRHJhdygpO1xyXG4gIH1cclxuXHJcbiAgb25Nb3VzZVVwKGUpOiB2b2lkIHtcclxuICAgIHRoaXMuaXNQYWludCA9IGZhbHNlO1xyXG4gICAgdGhpcy5sYXN0U2hhcGUgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgb25VbmRvKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubGF5ZXIuY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICB0aGlzLmxheWVyLmNoaWxkcmVuLnNwbGljZSgtMSwgMSk7XHJcbiAgICAgIHRoaXMubGF5ZXIuYmF0Y2hEcmF3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZShlKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNQYWludCB8fCAhdGhpcy5sYXN0U2hhcGUgfHwgdGhpcy5sYXN0U2hhcGUgPT09IERyYXdhYmxlRW51bS5UZXh0RHJhd2FibGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcG9zID0gdGhpcy5zdGFnZS5nZXRQb2ludGVyUG9zaXRpb24oKTtcclxuXHJcbiAgICBpZiAodGhpcy5kcmF3YWJsZVR5cGUgPT09IERyYXdhYmxlRW51bS5GcmVlUGF0aERyYXdhYmxlKSB7XHJcbiAgICAgIGxldCBuZXdQb2ludHMgPSB0aGlzLmxhc3RTaGFwZS5wb2ludHMoKS5jb25jYXQoW3Bvcy54LCBwb3MueV0pO1xyXG4gICAgICB0aGlzLmxhc3RTaGFwZS5wb2ludHMobmV3UG9pbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5kcmF3YWJsZVR5cGUgPT09IERyYXdhYmxlRW51bS5TcXVhcmVEcmF3YWJsZSkge1xyXG4gICAgICBjb25zdCBkeCA9IC0odGhpcy5sYXN0U2hhcGUuYXR0cnMueCAtIHBvcy54KTtcclxuICAgICAgY29uc3QgZHkgPSAtKHRoaXMubGFzdFNoYXBlLmF0dHJzLnkgLSBwb3MueSk7XHJcblxyXG4gICAgICB0aGlzLmxhc3RTaGFwZS5hdHRycy53aWR0aCA9IGR4O1xyXG4gICAgICB0aGlzLmxhc3RTaGFwZS5hdHRycy5oZWlnaHQgPSBkeTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5kcmF3YWJsZVR5cGUgPT09IERyYXdhYmxlRW51bS5DaXJjbGVEcmF3YWJsZSkge1xyXG4gICAgICBjb25zdCBkeCA9IHRoaXMubGFzdFNoYXBlLmF0dHJzLnggLSBwb3MueDtcclxuICAgICAgY29uc3QgZHkgPSB0aGlzLmxhc3RTaGFwZS5hdHRycy55IC0gcG9zLnk7XHJcbiAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgICAgIHRoaXMubGFzdFNoYXBlLmF0dHJzLnJhZGl1cyA9IHJhZGl1cztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5kcmF3YWJsZVR5cGUgPT09IERyYXdhYmxlRW51bS5BcnJvd0RyYXdhYmxlKSB7XHJcbiAgICAgIGxldCBuZXdQb2ludHMgPSBbdGhpcy5sYXN0U2hhcGUuYXR0cnMucG9pbnRzWzBdLCB0aGlzLmxhc3RTaGFwZS5hdHRycy5wb2ludHNbMV1dO1xyXG5cclxuICAgICAgbmV3UG9pbnRzLnB1c2gocG9zLngpO1xyXG4gICAgICBuZXdQb2ludHMucHVzaChwb3MueSk7XHJcblxyXG4gICAgICB0aGlzLmxhc3RTaGFwZS5wb2ludHMobmV3UG9pbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxheWVyLmJhdGNoRHJhdygpO1xyXG4gIH1cclxuXHJcblxyXG59XHJcbiJdfQ==