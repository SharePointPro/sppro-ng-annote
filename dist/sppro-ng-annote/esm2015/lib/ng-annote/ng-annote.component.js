import { Component, EventEmitter, Output } from '@angular/core';
import Konva from 'konva';
import { DrawableEnum } from '../enums/drawableEnum';
import shapeFactory from '../factories/shapeFactory';
import textareaFactory from '../factories/textareaFactory';
const DEFAULT_DRAWABLE_TYPE = DrawableEnum.FreePathDrawable;
const DEFAULT_FONT_FAMILY = 'Arial';
export class NgAnnoteComponent {
    constructor() {
        this.onSave = new EventEmitter();
        this._drawableType = DEFAULT_DRAWABLE_TYPE;
        this.isPaint = false;
        this.mode = 'brush';
        this.color = '#000000';
        this.textAreaVisible = false;
    }
    get drawableType() {
        return this._drawableType;
    }
    set drawableType(value) {
        this._drawableType = value;
    }
    ngOnInit() {
        this.img = new Image();
        this.img.onload = () => {
            this.image = new Konva.Image({
                image: this.img,
            });
            this.initalizeStage();
            this.layer = new Konva.Layer({});
            this.layer.add(this.image);
            this.stage.add(this.layer);
        };
        this.img.src = "https://sharepointpro.github.io/sppro-image-annote/static/media/room.fdc5a868.jpg";
    }
    initalizeStage() {
        this.stage = new Konva.Stage({
            container: "stage",
            width: this.img.width,
            height: this.img.height
        });
        this.stage.on('mousedown', (e) => { this.onMouseDown(e); });
        this.stage.on('mouseup', (e) => { this.onMouseUp(e); });
        this.stage.on('mousemove', (e) => { this.onMouseMove(e); });
    }
    onMouseDown(e) {
        this.isPaint = true;
        var pos = this.stage.getPointerPosition();
        if (this.drawableType === DrawableEnum.FreePathDrawable) {
            this.lastShape = shapeFactory.CreateLine(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.SquareDrawable) {
            this.lastShape = shapeFactory.CreateRectange(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.CircleDrawable) {
            this.lastShape = shapeFactory.CreateCircle(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.ArrowDrawable) {
            this.lastShape = shapeFactory.CreateArrow(pos.x, pos.y, this.color);
            this.layer.add(this.lastShape);
        }
        if (this.drawableType === DrawableEnum.TextDrawable) {
            if (!this.textAreaVisible) {
                this.textAreaVisible = true;
                textareaFactory.createTextArea(pos.x, pos.y, this.color, DEFAULT_FONT_FAMILY, (element) => {
                    if (element.target.value !== "") {
                        this.lastShape = shapeFactory.CreateText(pos.x, pos.y, this.color, DEFAULT_FONT_FAMILY, element.target.value);
                        this.layer.add(this.lastShape);
                        this.layer.batchDraw();
                        this.textAreaVisible = false;
                    }
                });
            }
        }
    }
    onSaveClick() {
        this.onSave.emit(this.stage.toDataURL());
    }
    onClear() {
        while (this.layer.children.length > 1) {
            this.onUndo();
        }
        this.layer.batchDraw();
    }
    onMouseUp(e) {
        this.isPaint = false;
        this.lastShape = null;
    }
    onUndo() {
        if (this.layer.children.length > 1) {
            this.layer.children.splice(-1, 1);
            this.layer.batchDraw();
        }
    }
    onMouseMove(e) {
        if (!this.isPaint || !this.lastShape || this.lastShape === DrawableEnum.TextDrawable) {
            return;
        }
        const pos = this.stage.getPointerPosition();
        if (this.drawableType === DrawableEnum.FreePathDrawable) {
            let newPoints = this.lastShape.points().concat([pos.x, pos.y]);
            this.lastShape.points(newPoints);
        }
        if (this.drawableType === DrawableEnum.SquareDrawable) {
            const dx = -(this.lastShape.attrs.x - pos.x);
            const dy = -(this.lastShape.attrs.y - pos.y);
            this.lastShape.attrs.width = dx;
            this.lastShape.attrs.height = dy;
        }
        if (this.drawableType === DrawableEnum.CircleDrawable) {
            const dx = this.lastShape.attrs.x - pos.x;
            const dy = this.lastShape.attrs.y - pos.y;
            const radius = Math.sqrt(dx * dx + dy * dy);
            this.lastShape.attrs.radius = radius;
        }
        if (this.drawableType === DrawableEnum.ArrowDrawable) {
            let newPoints = [this.lastShape.attrs.points[0], this.lastShape.attrs.points[1]];
            newPoints.push(pos.x);
            newPoints.push(pos.y);
            this.lastShape.points(newPoints);
        }
        this.layer.batchDraw();
    }
}
NgAnnoteComponent.decorators = [
    { type: Component, args: [{
                selector: 'sppro-ng-annote',
                template: "<div class='overlay sppro-overlay'>\n    <sppro-toolbar [(drawableType)]=\"drawableType\" [(color)]=\"color\" (onUndo)=\"onUndo()\" (onClear)=\"onClear()\" (onSave)=\"onSaveClick()\"></sppro-toolbar>\n    <div class=\"centeredBox\">\n        <div id=\"stage\">\n            \n        </div>\n    </div>\n\n</div>",
                styles: [".centeredBox{position:fixed;left:50%;top:50%;transform:translate(-50%,-50%)}.overlay{position:fixed;top:0;left:0;right:0;bottom:0;background-color:rgba(0,0,0,.6);z-index:1000}.closeButton{position:fixed;right:15px;top:15px;cursor:pointer}.crosshair{cursor:crosshair}.text{cursor:text}"]
            },] }
];
NgAnnoteComponent.ctorParameters = () => [];
NgAnnoteComponent.propDecorators = {
    onSave: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,